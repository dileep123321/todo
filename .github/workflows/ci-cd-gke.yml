name: Full Stack Todo App CI/CD (GCP GKE)

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: modern-saga-472703-k3
  GKE_CLUSTER: test-demo-cluster
  GKE_ZONE: us-central1-a
  BACKEND_IMAGE: gcr.io/modern-saga-472703-k3/todo-backend
  FRONTEND_IMAGE: gcr.io/modern-saga-472703-k3/todo-frontend

jobs:
  # --------------------------------------------------
  # 1. CHECKOUT, LINT, TEST, AND SCAN
  # --------------------------------------------------
  code_quality:
    name: Code Quality, Linting & Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Backend Dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Lint and Style Checks
        run: |
          echo "Running lint checks..."
          cd backend && flake8 . || true
          cd ../frontend && npx eslint . || true

      - name: Security Scan
        run: |
          echo "Running Bandit and npm audit..."
          cd backend && bandit -r . || true
          cd ../frontend && npm audit --audit-level=moderate || true

      - name: Unit & Integration Tests
        run: |
          echo "Running unit tests..."
          cd backend && pytest -v || true
          cd ../frontend && npm test -- --watchAll=false || true

      - name: File System Scan
        run: |
          echo "Scanning for secrets and large files..."
          trufflehog filesystem . || echo "No secrets found"
          git ls-files -z | xargs -0 du -h | sort -hr | head -n 20

      - name: Notify Code Quality Success
        run: echo "Code quality checks completed successfully"

  # --------------------------------------------------
  # 2. BUILD & PUSH BACKEND IMAGE
  # --------------------------------------------------
  build_backend:
    name: Build & Push Backend Image
    runs-on: ubuntu-latest
    needs: code_quality

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Build Backend Docker Image
        run: docker build -t $BACKEND_IMAGE:latest backend

      - name: Scan Backend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:latest
          format: 'table'
          exit-code: '0'

      - name: Push Backend Image to GCR
        run: docker push $BACKEND_IMAGE:latest

  # --------------------------------------------------
  # 3. BUILD & PUSH FRONTEND IMAGE
  # --------------------------------------------------
  build_frontend:
    name: Build & Push Frontend Image
    runs-on: ubuntu-latest
    needs: build_backend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Build Frontend Docker Image
        run: docker build -t $FRONTEND_IMAGE:latest frontend

      - name: Scan Frontend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:latest
          format: 'table'
          exit-code: '0'

      - name: Push Frontend Image to GCR
        run: docker push $FRONTEND_IMAGE:latest

  # --------------------------------------------------
  # 4. DEPLOY TO GKE
  # --------------------------------------------------
  deploy:
    name: Deploy to GKE Cluster
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      - name: Install GKE Auth Plugin
        run: |
          sudo apt-get update -y
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: Deploy MongoDB
        run: kubectl apply -f mongodb/ --validate=false

      - name: Deploy Backend
        run: kubectl apply -f backend/k8s/ --validate=false

      - name: Deploy Frontend
        run: kubectl apply -f frontend/k8s/ --validate=false

      - name: Update Deployment Images
        run: |
          kubectl set image deployment/backend-deployment backend=$BACKEND_IMAGE:latest --record || true
          kubectl set image deployment/frontend-deployment frontend=$FRONTEND_IMAGE:latest --record || true

      - name: Wait for Rollout
        run: |
          kubectl rollout status deployment/backend-deployment --timeout=180s || true
          kubectl rollout status deployment/frontend-deployment --timeout=180s || true

      - name: Show Service Details
        run: kubectl get svc -A -o wide

      - name: Notify Deployment Success
        run: echo "Deployment to GKE completed successfully"
